name: CI Checks

on:
  push:
    branches:
      - main

  workflow_dispatch:

jobs:

  test:
    name: Test App
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.20

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Downloads
      run: go get -t ./...

    - name: Run Test
      run: go test ./... -coverprofile=coverage.out

    - name: Coverage Check
      run: go tool cover -func coverage.out \
        | grep "total:" | awk '{print ((int($$3) > 80) != 1) }'
    
    - name: Generate Report
      run: go tool cover -html=coverage.out -o cover.html

    - name: Copy Files
      run: |
           mkdir  reports
           cp cover.xhtml reports/.
 
    - name: Archive
      uses: actions/upload-artifact@v2
      with:
          name: reports
          path: reports

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: test
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.20

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Build
      run: go build -o api -v cmd/main.go

    - name: Copy Files
      run: |
           mkdir  artifacts
           cp api artifacts/.

    - name: Archive
      uses: actions/upload-artifact@v2
      with:
          name: api
          path: artifacts

  deliver:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download binary
      uses: actions/download-artifact@v2
      with:
        name: api

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Still in experimentation phase
        draft: true
        prerelease: true

    - name: Upload Release Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN:
          ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url:
          ${{ steps.create_release.outputs.upload_url }}
        asset_path: api
        asset_name: api
        asset_content_type: application/octet-stream
